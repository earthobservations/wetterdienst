name: Tests
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.7", "3.8", "3.9"]
    env:
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python-version }}

    defaults:
      run:
        shell: bash

    name: Python ${{ matrix.python-version }} on OS ${{ matrix.os }}
    steps:

    - name: Acquire sources
      uses: actions/checkout@v2

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
        architecture: x64

    - name: Setup Poetry
      uses: snok/install-poetry@v1.1.2
      with:
        version: 1.1.5
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Get Poetry cache directory
      id: poetry-cache-dir
      run: |
        echo "::set-output name=dir::$(poetry config cache-dir)"

    - name: Apply cache
      id: poetry-cache-flag
      uses: actions/cache@v2
      env:
        # Increase this value to reset cache if `poetry.lock` has not changed.
        CACHE_NUMBER: 1
      with:
        path: ${{ steps.poetry-cache-dir.outputs.dir }}
        key: poetry-${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}-${{ env.CACHE_NUMBER }}

    - name: Install dependencies
      #run: poetry install --no-interaction --no-root --extras=sql --extras=export --extras=restapi --extras=explorer
      run: .github/workflows/install.sh testing
      #if: steps.poetry-cache-flag.outputs.cache-hit != 'true'

    #- name: Install library
    #  run: poetry install --no-interaction
    #  #if: steps.poetry-cache-flag.outputs.cache-hit != 'true'

    - name: Test
      run: poetry run poe test-parallel
