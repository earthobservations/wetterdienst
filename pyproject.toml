[tool.poetry]
name = "wetterdienst"
version = "0.15.0"
description = "Open weather data for humans"
authors = [
    "Benjamin Gutzmann <gutzemann@gmail.com>",
    "Andreas Motl <andreas.motl@panodata.org>",
]
license = "MIT"
readme = "README.rst"
include = [
    "LICENSE",
    "CHANGELOG.rst",
    "CODE_OF_CONDUCT.rst"
]
homepage = "https://wetterdienst.readthedocs.io/"
repository = "https://github.com/earthobservations/wetterdienst"

keywords = [
    "dwd",
    "deutscher wetterdienst",
    "german weather service",
    "weather",
    "weather-data",
    "weather-api",
    "open-data",
    "observations",
    "historical-data",
    "forecasts",
    "radar"
]
classifiers = [
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.6",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "License :: OSI Approved :: MIT License",
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "Intended Audience :: System Administrators",
    "Topic :: Communications",
    "Topic :: Database",
    "Topic :: Internet",
    "Topic :: Internet :: WWW/HTTP :: Indexing/Search",
    "Topic :: Scientific/Engineering :: Atmospheric Science",
    "Topic :: Scientific/Engineering :: GIS",
    "Topic :: Scientific/Engineering :: Human Machine Interfaces",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Interface Engine/Protocol Translator",
    "Topic :: Scientific/Engineering :: Visualization",
    "Topic :: Software Development :: Libraries",
    "Topic :: System :: Archiving",
    "Topic :: Text Processing",
    "Topic :: Utilities",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS"
]

[tool.poetry.urls]
"Issues" = "https://github.com/earthobservations/wetterdienst/issues"
"Releases" = "https://github.com/earthobservations/wetterdienst/releases"

[tool.poetry.dependencies]
python = "^3.6.1"
pandas = "^1.1.2"
numpy = "^1.19.5"
scipy = "^1.5.2"
cachetools = "^4.1.1"
docopt = "^0.6.2"
munch = "^2.5.0"
dateparser = "^1.0.0"
beautifulsoup4 = "^4.9.1"
requests = "^2.24.0"
python-dateutil = "^2.8.0"
"dogpile.cache" = "^1.0.2"
appdirs = "^1.4.4"
lxml = "^4.5.2"
tqdm = "^4.47.0"
PyPDF2 = "^1.26.0"
tabulate = "^0.8.7"
deprecation = "^2.1.0"

# Conditionally installed for backward compatibility with older Python versions
importlib_metadata              = { version = "^1.7.0", python = "<3.8" }
dataclasses                     = { version = "^0.7", python = "^3.6, <3.7" }

# Optional dependencies aka. "extras"
openpyxl                        = { version = "^3.0.5", optional = true }

duckdb                          = { version = "^0.2.3", optional = true }
influxdb                        = { version = "^5.3.0", optional = true }
crate                           = { version = "^0.25.0", optional = true, extras = ["sqlalchemy"] }
mysqlclient                     = { version = "^2.0.1", optional = true }
psycopg2-binary                 = { version = "^2.8.6", optional = true }

fastapi                         = { version = "^0.61.1", optional = true }
uvicorn                         = { version = "^0.13.3", python = "^3.6", optional = true }
wradlib                         = { version = "^1.9.0", optional = true }

matplotlib =  "^3.3.2"

sphinx = { version = "^3.2.1", optional = true }
sphinx-material = { version = "^0.0.30", optional = true }
sphinx-autodoc-typehints = { version = "^1.11.0", optional = true }
sphinxcontrib-svg2pdfconverter = { version = "^1.1.0", optional = true }
tomlkit = { version = "^0.7.0", optional = true }
ipython = { version = "^7.10.1", optional = true }
ipython-genutils = { version = "^0.2.0", optional = true }
aenum = "^2.2.6"

[tool.poetry.dev-dependencies]
black = "^20.8b1"
flakehell = "^0.7.1"
isort = "^5.7.0"
flake8-black = "^0.2.1"
flake8-bugbear = "^20.1.4"
flake8-bandit = "^2.1.2"
flake8-isort = "^4.0.0"
coverage = {extras = ["toml"], version = "^5.3"}
pytest = "^6.0.2"
pytest-cov = "^2.10.1"
pytest-notebook = "^0.6.1"
pytest-dictsdiff = "^0.5.8"
nbconvert = ">=5.0, <6.0"
mock = "^4.0.2"
surrogate = "^0.1"
pybufrkit = "^0.2.17"
h5py = "^3.1.0"

poethepoet = "^0.9.0"
dephell = "^0.8.3"
pip-licenses = "^3.3.0"
sphinx-autobuild = "^2020.9.1"

[tool.poetry.extras]
ipython = ["ipython", "ipython-genutils", "matplotlib"]
excel = ["openpyxl"]
docs = [
    "sphinx",
    "sphinx-material",
    "tomlkit",
    "sphinx-autodoc-typehints",
    "sphinxcontrib-svg2pdfconverter",
    "matplotlib",
    "ipython"
]
http = ["fastapi", "uvicorn"]
sql = ["duckdb"]
duckdb = ["duckdb"]
influxdb = ["influxdb"]
cratedb = ["crate"]
mysql = ["mysqlclient"]
postgresql = ["psycopg2-binary"]
radar = ["wradlib", "pybufrkit", "h5py"]
bufr = ["pybufrkit"]

[tool.poetry.scripts]
wetterdienst = 'wetterdienst.cli:run'
wddump = 'wetterdienst.dwd.radar.cli:wddump'

[tool.dephell.main]
from = {format = "poetry", path = "pyproject.toml"}
to = {format = "pip", path = "requirements.txt"}

[tool.isort]
profile = "black"
multi_line_output = 3

[tool.flakehell]
exclude = [
    "example/climate_observations.ipynb"
]
max-line-length = 88

[tool.flakehell.plugins]
pycodestyle = ["+*", "-E203", "-W503"]
pyflakes = ["+*"]
flake8-bandit = ["+*"]
flake8-black = ["+*"]
flake8-bugbear = ["+*"]
flake8-isort = ["+*"]

[tool.flakehell.exceptions."**/__init__.py"]
pyflakes = ["-F401"]

[tool.flakehell.exceptions."tests/"]
flake8-bandit = ["-S101"]
[tool.flakehell.exceptions."tests/dwd/radar/test_index.py"]
pycodestyle = ["-E501", "-B950"]
[tool.flakehell.exceptions."tests/dwd/observations/util/test_parameter.py"]
pycodestyle = ["-E501", "-B950"]

[tool.flakehell.exceptions."wetterdienst/cli.py"]
pycodestyle = ["-E501", "-B950"]
[tool.flakehell.exceptions."wetterdienst/service.py"]
flake8-bugbear = ["-B008"]
[tool.flakehell.exceptions."wetterdienst/util/pandas.py"]
pycodestyle = ["-E501", "-B950"]
[tool.flakehell.exceptions."wetterdienst/dwd/observations/metadata/column_types.py"]
pycodestyle = ["-E501", "-B950"]
[tool.flakehell.exceptions."wetterdienst/dwd/forecasts/metadata/column_types.py"]
pycodestyle = ["-E501", "-B950"]


[tool.poe.tasks]
format = "black wetterdienst example tests && isort wetterdienst example tests"  # black code formatting
lint = "flakehell lint wetterdienst example tests"
test = "pytest tests"
export_requirements = "dephell deps convert"
export_licenses = "pip-licenses --from=mixed --format=plain-vertical --with-authors --with-urls --with-license-file --no-license-path --ignore-packages wetterdienst --output-file=THIRD_PARTY_NOTICES"
export = ["export_requirements", "export_licenses"]

[tool.pytest.ini_options]
markers = [
    "remote: Tests accessing the internet.",
    "slow: Slow tests.",
    "sql: All tests related to SQL."
]

[tool.coverage.run]
branch = true
source = ["wetterdienst"]

[tool.coverage.report]
show_missing = true
fail_under = 0
omit = [
    "tests/*",
    "wetterdienst/dwd/radar/cli.py",
]

[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
