[tool.poetry]
name = "wetterdienst"
version = "0.58.1"
description = "Open weather data for humans"
authors = [
    "Benjamin Gutzmann <gutzemann@gmail.com>",
    "Andreas Motl <andreas.motl@panodata.org>",
]
license = "MIT"
readme = "README.rst"
include = [
    "LICENSE",
    "CHANGELOG.rst",
    "CODE_OF_CONDUCT.md"
]
homepage = "https://wetterdienst.readthedocs.io/"
repository = "https://github.com/earthobservations/wetterdienst"

keywords = [
    "open-source",
    "open-data",
    "weather",
    "weather-data",
    "weather-api",
    "weather-station",
    "time-series",
    "observations",
    "historical-data",
    "recent-data",
    "forecast",
    "radar",
    # DWD
    "dwd",
    "deutscher-wetterdienst",
    "german-weather-service",
    "mosmix",
    "radolan",
    # ECCC
    "eccc",
    "environment-and-climate-change-canada",
    "environnement-et-changement-climatique-canada",
    # NOAA
    "noaa",
    "national-oceanic-and-atmospheric-administration",
    "ghcn",
    "global-historical-climatology-network",
    # WSV
    "wsv",
    "Wasserstra√üen-und-Schifffahrtsverwaltung-des-Bundes",
    "Federal-Waterways-and-Shipping-Administration",
    # EA
    "ea",
    "environmental-agency-uk",
    # NWS
    "noaa-nws",
    "national-weather-service",
    # Eaufrance Hubeau
    "eaufrance-hubeau",
    # Geosphere Austria
    "geosphere",
    "geosphere-austria"
]
classifiers = [
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: MIT License",
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "Intended Audience :: System Administrators",
    "Topic :: Communications",
    "Topic :: Database",
    "Topic :: Internet",
    "Topic :: Internet :: WWW/HTTP :: Indexing/Search",
    "Topic :: Scientific/Engineering :: Atmospheric Science",
    "Topic :: Scientific/Engineering :: GIS",
    "Topic :: Scientific/Engineering :: Human Machine Interfaces",
    "Topic :: Scientific/Engineering :: Hydrology",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Interface Engine/Protocol Translator",
    "Topic :: Scientific/Engineering :: Visualization",
    "Topic :: Software Development :: Libraries",
    "Topic :: System :: Archiving",
    "Topic :: Text Processing",
    "Topic :: Utilities",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS"
]

[tool.poetry.urls]
"Issues" = "https://github.com/earthobservations/wetterdienst/issues"
"Releases" = "https://github.com/earthobservations/wetterdienst/releases"

[tool.poetry.dependencies]
python = "^3.9,<3.12"

aenum = "^3.0"
aiohttp = "^3.8.1"
backports-datetime-fromisoformat = "^2.0.0"
beautifulsoup4 = "^4.9"
cachetools = "^5.2"
click = "^8.0"
click-params = "^0.4.1"
cloup = "^2.0"
deprecation = "^2.1"
diskcache = "^5.4.0"
environs = "^9.4.0"
fsspec = "^2023.01"
lxml = "^4.9.1"
measurement = "^3.2"
numpy = "^1.22"
pandas = "^2.0"
Pint = "^0.17"
platformdirs = "^3.8"
polars = "^0.16"
pyarrow = "^12.0"
pypdf = "^3.12.1"
python-dateutil = "^2.8.2"
rapidfuzz = "^3.1"
requests = "^2.20"
scikit-learn = "^1.0.2"
stamina = "^23.1.0"
tabulate = "^0.8"
timezonefinder = "^6.1"
tqdm = "^4.47"
tzdata = "^2023.3"
xlsx2csv = "^0.8.1"
xlsxwriter = "^3.0.9"

crate                           = { version = "^0.30.1", optional = true }  # Export feature.
dash                            = { version = "^2.8", optional = true }  # Explorer UI feature.
dash-bootstrap-components       = { version = "^1.4", optional = true }  # Explorer UI feature.
dash-leaflet                    = { version = "^0.1.23", optional = true }  # Explorer UI feature.
duckdb                          = { version = "^0.7.1", optional = true }  # Export feature.
eccodes                         = { version = "^1.5.2", optional = true }
fastapi                         = { version = "^0.95.1", optional = true }  # HTTP REST API feature.
geojson                         = { version = "^3.0.0", optional = true }  # Explorer UI feature.
httpx                           = {version = "^0.24.0", optional = true}
h5py                            = { version = "^3.1", optional = true }  # Radar feature.
influxdb                        = { version = "^5.3", optional = true }  # Export feature.
influxdb-client                 = { version = "^1.18", optional = true }  # Export feature.
matplotlib                      = { version = "^3.3", optional = true }
mysqlclient                     = { version = "^2.0", optional = true }  # Export feature.
openpyxl                        = { version = "^3.0", optional = true }
pdbufr                          = { version = "^0.10.2", optional = true, extras = ["eccodes"] }
plotly                          = { version = "^5.11", optional = true }  # Explorer UI feature.
psycopg2-binary                 = { version = "^2.8", optional = true }  # Export feature.
scipy                           = { version = "^1.9", optional = true }  # Interpolation feature.
shapely                         = { version = "^2.0", optional = true }  # Interpolation feature.
sqlalchemy                      = { version = "^2.0", optional = true }  # Export feature.
utm                             = { version = "^0.7", optional = true }  # Interpolation feature.
uvicorn                         = { version = "^0.14", optional = true }  # HTTP REST API feature.
wradlib                         = { version = "^1.19", optional = true }  # Radar feature.
xarray                          = { version = "^2023.1", optional = true }
xradar                          = { version = "^0.2.0", optional = true } # Radar feature.
zarr                            = { version = "^2.13", optional = true }  # Export feature.

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
# TODO: Integrate Bandit with Ruff?
#       https://github.com/charliermarsh/ruff/issues/1646
bandit = "^1.7"
black = { version = "^22.12", extras = ["jupyter"] }
# TODO: currently there is a version constraint with jsonschema here
#cff-from-621 = { version = "^0.0.1", python = ">= 3.10"}
poethepoet = "^0.18.1"
ruff = "^0.0.250"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
coverage = { version = "^6.0", extras = ["toml"] }
dash = { version = "^2.6", extras = ["testing"] }
dirty-equals = "^0.5.0"
freezegun = "^1.2"
h5py = { version = "^3.1", optional = true}
ipykernel = "^6.19.4"
jsonschema = {extras = ["format-nongpl"], version = "^4.17.3"}
jupyter = "^1.0.0"
lmfit = "^1.1.0"  # required for example observations_station_gaussian_model.py
percy = "^2.0"
pybufrkit = "^0.2"
pytest = "^7.2"
pytest-cov = "^4.0"
pytest-dictsdiff = "^0.5"
pytest-notebook = "^0.8"
pytest-xdist = "^3"
selenium = "^4.0"
surrogate = "^0.1"
webdriver-manager = "^3.5.3"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
docformatter = "^1.4"
furo = "^2022.9.15"
ipython = "^8.5"
matplotlib = "^3.3"
sphinx = "^5.2"
sphinx-autodoc-typehints = "^1.11"
sphinx-autobuild = "^2021.3"
sphinx_design = "^0.3.0"
sphinxcontrib-svg2pdfconverter = "^1.1"
tomlkit = "^0.7"

[tool.poetry.extras]
bufr                = ["pybufrkit", "pdbufr"]
cratedb             = ["crate"]
duckdb              = ["duckdb"]
explorer            = ["dash", "dash-bootstrap-components", "dash-leaflet", "geojson", "plotly"]
export              = ["openpyxl", "sqlalchemy", "xarray", "zarr"]
influxdb            = ["influxdb", "influxdb-client"]
interpolation       = ["scipy", "shapely", "utm"]
ipython             = ["ipython", "matplotlib"]
mpl                 = ["matplotlib"]
mysql               = ["mysqlclient"]
postgresql          = ["psycopg2-binary"]
radar               = ["h5py"]
radarplus           = ["pybufrkit", "wradlib", "xradar"]
restapi             = ["fastapi", "httpx", "uvicorn"]
sql                 = ["duckdb"]

[tool.poetry.scripts]
wetterdienst = 'wetterdienst.ui.cli:cli'
wddump = 'wetterdienst.provider.dwd.radar.cli:wddump'

[tool.dephell.main]
from = {format = "poetry", path = "pyproject.toml"}
to = {format = "pip", path = "requirements.txt"}

[tool.black]
line-length = 120

[tool.ruff]
line-length = 120

select = [
    # Bandit
    "S",
    # Bugbear
    "B",
    # Builtins
    "A",
    # comprehensions
    "C4",
    # eradicate
    "ERA",
    # flake8-2020
    "YTT",
    # isort
    "I",
    # print
    "T20",
    # Pycodestyle
    "E",
    "W",
    # Pyflakes
    "F",
    # return
    "RET",
]

extend-ignore = [
    # zip() without an explicit strict= parameter.
    "B905",
    # Unnecessary `elif` after `return` statement
    "RET505",
]


[tool.ruff.per-file-ignores]
"**/__init__.py" = ["F401"]
"benchmarks/*" = ["T20"]
"docs/conf.py" = ["ERA001"]
"example/*" = ["T20"]
"tests/*" = ["S101"]
"tests/provider/dwd/observation/test_available_datasets.py" = ["E402"]
"wetterdienst/__init__.py" = ["E402"]
"wetterdienst/ui/restapi.py" = ["B008"]

[tool.poe.tasks]
install_dev = "poetry install --with=test,dev,docs -E mpl -E ipython -E sql -E export -E duckdb -E influxdb -E cratedb -E mysql -E postgresql -E radar -E bufr -E restapi -E explorer -E bufr -E interpolation"

# Linting and formatting.
lint = ["ruff", "black-check"]
ruff = "ruff ."
black-check = "black --check ."

format = ["black-fix", "isort-fix"]
black-fix = "black ."
isort-fix = "ruff --fix --select=I ."

docs = { shell = "cd docs && poetry run make html" }
test-cflakes = "pytest -m cflake"
test-parallel = "pytest --numprocesses=auto -m 'not (explorer or cflake)'"
test = ["test-parallel", "test-cflakes"]
# For Windows CI
test-slow = "pytest"
coverage = "pytest --cov=wetterdienst"
coverage-parallel = "pytest --cov=wetterdienst --numprocesses=auto -m 'not (explorer or cflake)'"
update = "poetry update"
citation = "python -m tools.citation"

[tool.pytest.ini_options]
addopts = "-rsfEX -p pytester --strict-markers --verbosity=3 --webdriver=Firefox --headless"
#log_cli = true
#log_cli_level = "DEBUG"
log_date_format = "%Y-%m-%dT%H:%M:%S"
log_format = "%(asctime)-15s.%(msecs)03d [%(name)-35s] %(levelname)-8s: %(message)s"
log_level = "DEBUG"
markers = [
    "remote: Tests accessing the internet.",
    "slow: Slow tests.",
    "sql: All tests related to SQL.",
    "explorer: All tests related to the explorer UI.",
    "cflake: Tests which are flaky under concurrency",
]
minversion = "2.0"
testpaths = ["tests"]
# Detect tests marked with xfail, which are actually succeeding.
# xfail_strict = true

[tool.coverage.run]
branch = true
source = ["wetterdienst"]

[tool.coverage.report]
show_missing = true
fail_under = 0
omit = [
    "tests/*",
    "wetterdienst/provider/dwd/radar/cli.py",
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
