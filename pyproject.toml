[tool.poetry]
name = "wetterdienst"
version = "0.34.0"
description = "Open weather data for humans"
authors = [
    "Benjamin Gutzmann <gutzemann@gmail.com>",
    "Andreas Motl <andreas.motl@panodata.org>",
]
license = "MIT"
readme = "README.rst"
include = [
    "LICENSE",
    "CHANGELOG.rst",
    "CODE_OF_CONDUCT.md"
]
homepage = "https://wetterdienst.readthedocs.io/"
repository = "https://github.com/earthobservations/wetterdienst"

keywords = [
    "open-source",
    "open-data",
    "weather",
    "weather-data",
    "weather-api",
    "weather-station",
    "time-series",
    "observations",
    "historical-data",
    "recent-data",
    "forecast",
    "radar",
    # DWD
    "dwd",
    "deutscher-wetterdienst",
    "german-weather-service",
    "mosmix",
    "radolan",
    # ECCC
    "eccc",
    "environment-and-climate-change-canada",
    "environnement-et-changement-climatique-canada",
    # NOAA
    "noaa",
    "national-oceanic-and-atmospheric-administration",
    "ghcn",
    "global-historical-climatology-network",
    # WSV
    "wsv",
    "Wasserstra√üen-und-Schifffahrtsverwaltung-des-Bundes",
    "Federal-Waterways-and-Shipping-Administration",
]
classifiers = [
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "License :: OSI Approved :: MIT License",
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "Intended Audience :: System Administrators",
    "Topic :: Communications",
    "Topic :: Database",
    "Topic :: Internet",
    "Topic :: Internet :: WWW/HTTP :: Indexing/Search",
    "Topic :: Scientific/Engineering :: Atmospheric Science",
    "Topic :: Scientific/Engineering :: GIS",
    "Topic :: Scientific/Engineering :: Human Machine Interfaces",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Interface Engine/Protocol Translator",
    "Topic :: Scientific/Engineering :: Visualization",
    "Topic :: Software Development :: Libraries",
    "Topic :: System :: Archiving",
    "Topic :: Text Processing",
    "Topic :: Utilities",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS"
]

[tool.poetry.urls]
"Issues" = "https://github.com/earthobservations/wetterdienst/issues"
"Releases" = "https://github.com/earthobservations/wetterdienst/releases"

[tool.poetry.dependencies]
python = "^3.8,<3.11"
pandas = "^1.3"
numpy = "^1.22"
cachetools = "^4.1"
dateparser = "^1.0"
beautifulsoup4 = "^4.9"
requests = "^2.20"
python-dateutil = "^2.8"
appdirs = "^1.4"
lxml = "^4.5"
tqdm = "^4.47"
PyPDF2 = "^1.26"
tabulate = "^0.8"
deprecation = "^2.1"
measurement = "^3.2"
rapidfuzz = "^1.4"
Pint = "^0.17"
aenum = "^3.0"
click = "^8.0"
click-params = "^0.1"
cloup = "^0.8"
fsspec = "2021.7"
aiohttp = "^3.7"

# Optional dependencies aka. "extras"
matplotlib =  { version = "^3.3", optional = true }

openpyxl                        = { version = "^3.0", optional = true }
pyarrow                         = { version = ">6.0", optional = true }
duckdb                          = { version = "^0.3.2", optional = true }
influxdb                        = { version = "^5.3", optional = true }
influxdb-client                 = { version = "^1.18", optional = true }
sqlalchemy                      = { version = "^1.4", optional = true }
mysqlclient                     = { version = "^2.0", optional = true }
psycopg2-binary                 = { version = "^2.8", optional = true }

# HTTP REST API service
fastapi                         = { version = "^0.65", optional = true }
uvicorn                         = { version = "^0.14", optional = true }
wradlib                         = { version = "^1.13", optional = true }

# Radar
eccodes                         = { version = "1.2.0", optional = true }
pdbufr                          = { version = "^0.9.0", optional = true, extras = ["eccodes"] }

# Explorer UI service
plotly                          = { version = "^5.0", optional = true }
dash                            = { version = "^2.0", optional = true }
dash-bootstrap-components       = { version = "^1.0", optional = true }
werkzeug                        = { version = "2.0.0" }

sphinx = { version = "^4.5", optional = true }
sphinx-material = { version = "^0.0.30", optional = true }
sphinx-autodoc-typehints = { version = "^1.11", optional = true }
sphinxcontrib-svg2pdfconverter = { version = "^1.1", optional = true }
tomlkit = { version = "^0.7", optional = true }
ipython = { version = "^7.10", optional = true }
ipython-genutils = { version = "^0.2", optional = true }
zarr = { version = "^2.7", optional = true }
xarray = { version = "^2022.3", optional = true }
timezonefinder = "^5.2"
diskcache = "^5.4.0"
environs = "^9.4.0"
scikit-learn = "^1.0.2"

[tool.poetry.dev-dependencies]
poethepoet = "^0.9"

pip-licenses = "^3.3"

# Formatting/Linting
black = "^22.3.0"

isort = "^5.7"

flakeheaven = "^0.11"
flake8-bandit = "^2.1"
bandit = "^1.0,<1.7.3"
flake8-black = "^0.2,<0.2.5"
flake8-bugbear = "^20.1"
flake8-builtins = "^1.5"
flake8-comprehensions = "^3.7"
flake8-copyright = "^0.2"
flake8-docstrings = "^1.6"
flake8-eradicate = "^1.2"
flake8-isort = "^4.0"
flake8-print = "^4.0"
flake8-return = "^1.1"
flake8-2020 = "^1.6"

# Testing
pytest = "^6.0"
pytest-cov = "^2.10"
pytest-dictsdiff = "^0.5"
pytest-notebook = "^0.7"
pytest-xdist = "^2.2"

mock = "^4.0"
freezegun = "^1.1"

# Test required libraries
surrogate = "^0.1"
pybufrkit = "^0.2"
selenium = "^3.141"
percy = "^2.0"
h5py = "^3.1"
webdriver-manager = "^3.5.3"

# Coverage
coverage = { version = "^5.3", extras = ["toml"] }

# Docs
sphinx-autobuild = "^2020.9"
docformatter = "^1.4"

[tool.poetry.extras]
mpl = ["matplotlib"]
ipython = ["ipython", "ipython-genutils", "matplotlib"]
docs = [
    "sphinx",
    "sphinx-material",
    "tomlkit",
    "sphinx-autodoc-typehints",
    "sphinxcontrib-svg2pdfconverter",
    "matplotlib",
    "ipython"
]
restapi = ["fastapi", "uvicorn"]
explorer = ["plotly", "dash", "dash-bootstrap-components"]
sql = ["duckdb"]
export = ["openpyxl", "sqlalchemy", "pyarrow", "xarray", "zarr"]
duckdb = ["duckdb"]
influxdb = ["influxdb", "influxdb-client"]
cratedb = ["crate"]
mysql = ["mysqlclient"]
postgresql = ["psycopg2-binary"]
radar = ["wradlib", "pybufrkit", "h5py", "pdbufr"]
bufr = ["pybufrkit", "pdbufr"]

[tool.poetry.scripts]
wetterdienst = 'wetterdienst.ui.cli:cli'
wddump = 'wetterdienst.provider.dwd.radar.cli:wddump'

[tool.dephell.main]
from = {format = "poetry", path = "pyproject.toml"}
to = {format = "pip", path = "requirements.txt"}

[tool.black]
line-length = 120

[tool.isort]
profile = "black"
multi_line_output = 3

[tool.flakeheaven]
exclude = [
    "example/climate_observations.ipynb"
]
format = "grouped"
max-line-length = 120
extended_default_ignore = []

[tool.flakeheaven.plugins]
pycodestyle = ["+*", "-E203", "-W503", "-E501", "-E231"]
pyflakes = ["+*"]
flake8-bandit = ["+*"]
flake8-black = ["+*"]
flake8-bugbear = ["+*"]
flake8-builtins = ["+*", "-A003"]
flake8-comprehensions = ["+*"]
flake8-copyright = ["+*"]
flake8-eradicate = ["+*"]
flake8-isort = ["+*"]
flake8-print = ["+*"]
flake8-return = ["+*"]
flake8-2020 = ["+*"]

[tool.flakeheaven.exceptions."wetterdienst/__init__.py"]
pycodestyle = ["-E402"]
[tool.flakeheaven.exceptions."**/__init__.py"]
pyflakes = ["-F401"]
[tool.flakeheaven.exceptions."wetterdienst/util/fsspec_monkeypatch.py"]
flake8-bugbear = ["-B301"]
[tool.flakeheaven.exceptions."example/"]
flake8-print = ["-*"]
[tool.flakeheaven.exceptions."tests/"]
flake8-bandit = ["-S101", "-S106"]
[tool.flakeheaven.exceptions."wetterdienst/ui/restapi.py"]
flake8-bugbear = ["-B008"]

[tool.poe.tasks]
install_dev = "poetry install -E mpl -E ipython -E docs -E sql -E export -E duckdb -E influxdb -E cratedb -E mysql -E postgresql -E radar -E bufr -E restapi -E explorer -E bufr"
black = "black wetterdienst example tests"
isort = "isort wetterdienst example tests"
format = ["black", "isort"]
lint = "flakeheaven lint wetterdienst example tests"
docs = { shell = "cd docs && poetry run make html" }
test-cflakes = "pytest -vvv -m cflake tests"
test-parallel = "pytest -vvv --numprocesses=auto -m 'not (explorer or cflake)' tests"
test = ["test-parallel", "test-cflakes"]
# For Windows CI
test-slow = "pytest -vvv tests"
coverage = "pytest --cov=wetterdienst tests"
coverage-parallel = "pytest --cov=wetterdienst --numprocesses=auto -m 'not (explorer or cflake)' tests"
export_requirements = "poetry export --without-hashes --dev --output requirements.txt"
export_licenses = "pip-licenses --format=plain-vertical --with-authors --with-urls --with-license-file --no-license-path --ignore-packages wetterdienst --output-file=THIRD_PARTY_NOTICES"
export = ["export_requirements", "export_licenses"]
update = "poetry update"

[tool.pytest.ini_options]
markers = [
    "remote: Tests accessing the internet.",
    "slow: Slow tests.",
    "sql: All tests related to SQL.",
    "explorer: All tests related to the explorer UI.",
    "cflake: Tests which are flaky under concurrency",
]
addopts = "-vvv --webdriver=Firefox --headless"

#log_cli = true
#log_cli_level = "DEBUG"

log_format = "%(asctime)-15s.%(msecs)03d [%(name)-35s] %(levelname)-8s: %(message)s"
log_date_format = "%Y-%m-%dT%H:%M:%S"


[tool.coverage.run]
branch = true
source = ["wetterdienst"]

[tool.coverage.report]
show_missing = true
fail_under = 0
omit = [
    "tests/*",
    "wetterdienst/provider/dwd/radar/cli.py",
]

[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
