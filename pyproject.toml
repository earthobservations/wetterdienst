[tool.poetry]
name = "wetterdienst"
version = "0.74.0"
description = "Open weather data for humans"
authors = [
    "Benjamin Gutzmann <gutzemann@gmail.com>",
    "Andreas Motl <andreas.motl@panodata.org>",
]
license = "MIT"
readme = "README.rst"
include = [
    "LICENSE",
    "CHANGELOG.rst",
    "CODE_OF_CONDUCT.md"
]
homepage = "https://wetterdienst.readthedocs.io/"
repository = "https://github.com/earthobservations/wetterdienst"

keywords = [
    "open-source",
    "open-data",
    "time-series",
    "observation",
    "forecast",
    "radar",
    "historical",
    "recent",
    "near-real-time",
    "weather-data",
    "weather-api",
    "weather-station",
    # DWD
    "deutscher-wetterdienst",
    "mosmix",
    "dmo",
    "radolan",
    # Eaufrance Hubeau
    "eaufrance-hubeau",
    # EA
    "environmental-agency-uk",
    # ECCC
    "environment-and-climate-change-canada",
    # Geosphere Austria
    "geosphere-austria",
    # IMGW
    "institute-of-meteorology-and-water-management-poland",
    # NOAA
    "national-oceanic-and-atmospheric-administration",
    "ghcn",
    # NWS
    "national-weather-service",
    # WSV
    "federal-waterways-and-shipping-administration-germany",
]
classifiers = [
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "Intended Audience :: System Administrators",
    "Topic :: Communications",
    "Topic :: Database",
    "Topic :: Internet",
    "Topic :: Internet :: WWW/HTTP :: Indexing/Search",
    "Topic :: Scientific/Engineering :: Atmospheric Science",
    "Topic :: Scientific/Engineering :: GIS",
    "Topic :: Scientific/Engineering :: Human Machine Interfaces",
    "Topic :: Scientific/Engineering :: Hydrology",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Interface Engine/Protocol Translator",
    "Topic :: Scientific/Engineering :: Visualization",
    "Topic :: Software Development :: Libraries",
    "Topic :: System :: Archiving",
    "Topic :: Text Processing",
    "Topic :: Utilities",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS"
]

[tool.poetry.urls]
"Issues" = "https://github.com/earthobservations/wetterdienst/issues"
"Releases" = "https://github.com/earthobservations/wetterdienst/releases"

[tool.poetry.dependencies]
python = ">=3.9,<4.0"

aenum = ">=3,<3.2"
aiohttp = ">=3.8,<3.10"
backports-datetime-fromisoformat = ">=2,<3"
beautifulsoup4 = ">=4.9,<5"
cachetools = ">=5.2,<6"
click = ">=8,<9"
click-params = ">=0.4.1,<5"
cloup = ">=3.0.1,<4"
deprecation = ">=2.1,<3"
diskcache = ">=5.4.0,<6"
environs = ">=9.4.0,<11"
fsspec = ">=2023.1,<2024.3"
lxml = ">=4.9.1,<6"
measurement = ">=3.2,<4"
numpy = ">=1.22,<1.27"
Pint = ">=0.17,<0.24"
platformdirs = "<5"
polars = ">=0.20.6,<0.20.7"
portion = ">=2.4.2"
pyarrow = ">=13,<16"
pypdf = ">=3.12.1,<4.1"
python-dateutil = "<3"
rapidfuzz = ">=3.1,<4"
requests = ">=2.20,<3"
scikit-learn = ">=1.0.2,<1.5"
stamina = ">=23,<25"
tabulate = ">=0.8,<0.10"
tqdm = ">=4,<5"
tzfpy = ">=0.15.2,<1"

crate                           = { version = ">=0.30.1,<1", optional = true }  # Export feature.
dash                            = { version = ">=2.10,<2.16", optional = true }  # Explorer UI feature.
dash-bootstrap-components       = { version = ">=1.4,<2", optional = true }  # Explorer UI feature.
dash-leaflet                    = { version = ">=1.0.8,<2", optional = true }  # Explorer UI feature.
duckdb                          = { version = ">=0.9", optional = true, markers = "python_version != '3.12'" }  # Export feature.
eccodes                         = { version = ">=1.5.2,<1.7", optional = true }
fastapi                         = { version = ">=0.95.1,<0.110", optional = true }  # HTTP REST API feature.
geojson                         = { version = ">=3,<4", optional = true }  # Explorer UI feature.
httpx                           = { version = ">=0.24,<0.27", optional = true}
h5py                            = { version = ">=3.1,<4", optional = true }  # Radar feature.
influxdb                        = { version = ">=5.3,<6", optional = true }  # Export feature.
influxdb-client                 = { version = ">=1.18,<2", optional = true }  # Export feature.
influxdb3-python                = { version = ">=0.3.0,<1", optional = true}  # Export feature
matplotlib                      = { version = ">=3.3,<3.9", optional = true }
mysqlclient                     = { version = ">=2,<3", optional = true }  # Export feature.
pandas                          = { version = ">=2,<2.3", optional = true }  # Export feature.
pdbufr                          = { version = ">=0.10.2,<0.12", optional = true, extras = ["eccodes"] }
plotly                          = { version = ">=5.11,<6", optional = true }  # Explorer UI feature.
psycopg2-binary                 = { version = ">=2.8,<3", optional = true }  # Export feature.
scipy                           = { version = ">=1.9,<1.13", optional = true }  # Interpolation feature.
shapely                         = { version = ">=2,<3", optional = true }  # Interpolation feature.
sqlalchemy                      = { version = ">=2,<2.1", optional = true }  # Export feature.
streamlit                       = { version = ">=1.27,<2", optional = true, markers = "python_version != '3.9.7'" }  # Streamlit app
utm                             = { version = ">=0.7,<1", optional = true }  # Interpolation feature.
uvicorn                         = { version = ">=0.14,<1", optional = true }  # HTTP REST API feature.
wradlib                         = { version = ">=2.0.1,<3", optional = true }  # Radar feature.
xarray                          = { version = ">=2023.1,<2024.2", optional = true }
xlsx2csv                        = { version = ">=0.8.1,<0.9", optional = true }  # Import
xlsxwriter                      = { version = ">=3.0.9,<3.2", optional = true }  # Export feature.
xradar                          = { version = ">=0.2,<0.5", optional = true } # Radar feature.
zarr                            = { version = ">=2.13,<3", optional = true }  # Export feature.

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
# TODO: Currently there is a version conflict with jsonschema here
#cff-from-621 = { version = "==0.0.1", python = ">= 3.10"}
poethepoet = ">=0.18.1,<0.25"
pyproject-fmt = "^1.5.3"
ruff = "==0.2.2"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
coverage = { version = ">=7.3,<8", extras = ["toml"] }
dash = { version = ">=2.10,<2.16", extras = ["testing"] }
dirty-equals = ">=0.5.0,<1"
freezegun = ">=1.2,<2"
h5py = { version = ">=3.1,<3.11", optional = true}
ipykernel = ">=6.19.4,<7"
jsonschema = { version = ">=4.17.3,<5", extras = ["format-nongpl"] }
jupyter = ">=1,<2"
lmfit = ">=1.1.0,<1.3"  # required for example observations_station_gaussian_model.py
pybufrkit = ">=0.2,<0.3"
pytest = ">=7.2,<9"
pytest-cov = ">=4,<5"
pytest-dictsdiff = ">=0.5,<0.6"
pytest-notebook = ">=0.10"
pytest-rerunfailures = "<14"
pytest-xdist = ">=3,<4"
selenium = ">=4,<5"
surrogate = "==0.1"
webdriver-manager = ">=4,<5"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
docformatter = ">=1.4,<1.8"
furo = ">=2023.3,<2024.2"
ipython = ">=8.5,<9"
matplotlib = ">=3.3,<3.9"
sphinx = ">=7,<8"
sphinx-autodoc-typehints = ">=1.11,<2"
sphinx-autobuild = ">=2020.9,<2024.3"
sphinx_design = ">=0.5,<1"
sphinxcontrib-svg2pdfconverter = ">=1.1,<2"
tomlkit = ">=0.7,<1"

[tool.poetry.extras]
bufr                = ["pybufrkit", "pdbufr"]
cratedb             = ["pandas", "crate"]
duckdb              = ["pandas", "duckdb"]
eccodes             = ["eccodes"]
excel               = ["xlsxwriter"]
explorer            = ["dash", "dash-bootstrap-components", "dash-leaflet", "geojson", "plotly"]
export              = ["pandas", "sqlalchemy", "xarray", "xlsxwriter", "zarr"]
import              = ["xlsx2csv"]
influxdb            = ["influxdb", "influxdb-client", "influxdb3-python"]
interpolation       = ["scipy", "shapely", "utm"]
ipython             = ["ipython", "matplotlib"]
mpl                 = ["matplotlib"]
mysql               = ["pandas", "mysqlclient"]
postgresql          = ["psycopg2-binary"]
radar               = ["h5py"]
radarplus           = ["pybufrkit", "wradlib", "xradar"]
restapi             = ["fastapi", "httpx", "uvicorn"]
sql                 = ["duckdb"]
streamlit           = ["streamlit"]

[tool.poetry.scripts]
wetterdienst = 'wetterdienst.ui.cli:cli'
wddump = 'wetterdienst.provider.dwd.radar.cli:wddump'

[tool.ruff]
line-length = 120
extend-include = ["*.ipynb"]

[tool.ruff.lint]
select = [
    # Bandit
    "S",
    # Bugbear
    "B",
    # Builtins
    "A",
    # comprehensions
    "C4",
    # eradicate
    "ERA",
    # flake8-2020
    "YTT",
    # isort
    "I",
    # print
    "T20",
    # Pycodestyle
    "E",
    "W",
    # Pyflakes
    "F",
    # return
    "RET",
]
extend-ignore = [
    # zip() without an explicit strict= parameter.
    "B905",
    # Unnecessary `elif` after `return` statement
    "RET505",
]
unfixable = ["ERA", "F401", "F841", "T20", "ERA001"]

[tool.ruff.lint.per-file-ignores]
"**/__init__.py" = ["F401"]
"benchmarks/*" = ["T20"]
"docs/conf.py" = ["ERA001"]
"examples/*" = ["T20"]
"tests/*" = ["S101"]
"tests/provider/dwd/observation/test_available_datasets.py" = ["E402"]
"wetterdienst/__init__.py" = ["E402"]
"wetterdienst/ui/restapi.py" = ["B008"]

[tool.pytest.ini_options]
addopts = "-rsfEX -p pytester --strict-markers --verbosity=3 --webdriver=Firefox --headless"
#log_cli = true
#log_cli_level = "DEBUG"
log_date_format = "%Y-%m-%dT%H:%M:%S"
log_format = "%(asctime)-15s.%(msecs)03d [%(name)-35s] %(levelname)-8s: %(message)s"
log_level = "DEBUG"
markers = [
    "remote: Tests accessing the internet.",
    "slow: Slow tests.",
    "sql: All tests related to SQL.",
    "explorer: All tests related to the explorer UI.",
    "cflake: Tests which are flaky under concurrency",
]
minversion = "2.0"
testpaths = ["tests"]
# Detect tests marked with xfail, which are actually succeeding.
# xfail_strict = true

# Retry flaky tests, thereby improving the consistency of the test suite results.
reruns = 0
reruns_delay = 5

[tool.coverage.run]
branch = true
source = ["wetterdienst"]

[tool.coverage.report]
show_missing = true
fail_under = 0
omit = [
    "tests/*",
    "wetterdienst/provider/dwd/radar/cli.py",
]

[tool.poe.tasks]
install_dev = "poetry install --with=test,dev,docs -E mpl -E ipython -E sql -E export -E duckdb -E influxdb -E cratedb -E mysql -E postgresql -E radar -E bufr -E restapi -E explorer -E bufr -E interpolation"
# Linting and formatting.
format = [
  # Fix all things with ruff, but skip a few:
  # unused imports (F401), unused variables (F841), `print` statements (T201), and commented-out code (ERA001).
  { cmd = "ruff format wetterdienst tests benchmarks examples"},
  { cmd = "ruff check --fix wetterdienst tests benchmarks examples" },
  { cmd = "pyproject-fmt ."}
]

lint = [
  { cmd = "ruff format --check wetterdienst tests benchmarks examples" },
  { cmd = "ruff check wetterdienst tests benchmarks examples" },
  { cmd = "pyproject-fmt --check ."}
]
docs = { shell = "cd docs && poetry run make html" }
test-cflakes = "pytest -m cflake"
test-parallel = "pytest --numprocesses=auto -m 'not (explorer or cflake)'"
test = ["test-parallel", "test-cflakes"]
# For Windows CI
test-slow = "pytest"
coverage = "pytest --cov=wetterdienst"
coverage-parallel = "pytest --cov=wetterdienst --numprocesses=auto -m 'not (explorer or cflake)'"
update = "poetry update"
citation = "python -m tools.citation"
streamlit = "streamlit run ./wetterdienst/ui/streamlit/app.py"

[build-system]
build-backend = "poetry.core.masonry.api"
requires = [
  "poetry-core",
]
