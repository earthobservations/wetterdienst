[project]
name = "wetterdienst"
version = "0.94.0"
authors = [
  { name = "Benjamin Gutzmann", email = "gutzemann@gmail.com" },
  { name = "Andreas Motl", email = "andreas.motl@panodata.org" },
]
description = "Open weather data for humans"
readme = "README.rst"
license = { file = "LICENSE" }
keywords = [
  # DWD
  "deutscher-wetterdienst",
  "dmo",
  # Eaufrance Hubeau
  "eaufrance-hubeau",
  # ECCC
  "environment-and-climate-change-canada",
  # EA
  "environmental-agency-uk",
  # WSV
  "federal-waterways-and-shipping-administration-germany",
  "forecast",
  # Geosphere Austria
  "geosphere-austria",
  "ghcn",
  "historical",
  # IMGW
  "institute-of-meteorology-and-water-management-poland",
  "mosmix",
  # NOAA
  "national-oceanic-and-atmospheric-administration",
  # NWS
  "national-weather-service",
  "near-real-time",
  "observation",
  "open-data",
  "open-source",
  "radar",
  "radolan",
  "recent",
  "time-series",
  "weather-api",
  "weather-data",
  "weather-station",
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Intended Audience :: Information Technology",
  "Intended Audience :: Science/Research",
  "Intended Audience :: System Administrators",
  "License :: OSI Approved :: MIT License",
  "Operating System :: MacOS",
  "Operating System :: POSIX",
  "Operating System :: Unix",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Communications",
  "Topic :: Database",
  "Topic :: Internet",
  "Topic :: Internet :: WWW/HTTP :: Indexing/Search",
  "Topic :: Scientific/Engineering :: Atmospheric Science",
  "Topic :: Scientific/Engineering :: GIS",
  "Topic :: Scientific/Engineering :: Human Machine Interfaces",
  "Topic :: Scientific/Engineering :: Hydrology",
  "Topic :: Scientific/Engineering :: Information Analysis",
  "Topic :: Scientific/Engineering :: Interface Engine/Protocol Translator",
  "Topic :: Scientific/Engineering :: Visualization",
  "Topic :: Software Development :: Libraries",
  "Topic :: System :: Archiving",
  "Topic :: Text Processing",
  "Topic :: Utilities",
]
requires-python = ">=3.9,<4.0"
dependencies = [
  "aenum>=3,<3.2",
  "aiohttp>=3.8,<3.11",
  "backports-datetime-fromisoformat>=2,<3; python_version<'3.11'",
  "beautifulsoup4>=4.9,<5",
  "cachetools>=5.2,<6",
  "click>=8,<9",
  "click-params>=0.4.1,<5",
  "cloup>=3.0.1,<4",
  "deprecation>=2.1,<3",
  "diskcache>=5.4,<6",
  "environs>=9.4,<12",
  "eval-type-backport>=0.1.3; python_version<'3.10'",
  "fsspec>=2023.1,<2024.3",
  "lxml>=4.9.1,<6",
  "measurement>=3.2,<4",
  "numpy>=1.22,<1.27",
  "pillow>=10.3",
  "pint>=0.17,<0.24",
  "platformdirs<5",
  "polars>=0.20.10",
  "portion>=2.4.2",
  "pyarrow>=13,<18",
  "pydantic>=2.7.3",
  "pypdf>=3.12.1,<4.1",
  "python-dateutil<3",
  "rapidfuzz>=3.1,<4",
  "requests>=2.20,<3",
  "scikit-learn>=1.0.2,<1.6",
  "stamina>=23,<25",
  "tabulate>=0.8,<0.10",
  "tqdm>=4,<5",
  "tzfpy>=0.15.2,<1",
]

[project.optional-dependencies]
bufr = [
  "pdbufr>=0.10.2,<0.12",
  "pybufrkit>=0.2,<0.3",
]
cratedb = [
  "pandas>=2,<2.3",
  "sqlalchemy-cratedb<1",
]
duckdb = [
  "duckdb>=0.9",
  "pandas>=2,<2.3",
]
eccodes = [
  "eccodes>=1.5.2,<1.8",
]
excel = [
  "xlsxwriter>=3.0.9,<3.3",
]
explorer = [
  "duckdb>=0.9",
  "plotly>=5.11,<6",
  "statsmodels>=0.14.1",
  "streamlit>=1.27,<2",
]
export = [
  "pandas>=2,<2.3",
  "sqlalchemy>=2,<2.1",
  "xarray>=2023.1,<2024.3",
  "xlsxwriter>=3.0.9,<3.3",
  "zarr>=2.13,<3",
]
export_without_zarr = [
  "pandas>=2,<2.3",
  "sqlalchemy>=2,<2.1",
  "xarray>=2023.1,<2024.3",
  "xlsxwriter>=3.0.9,<3.3",
]
import = [
  "fastexcel>=0.10.4",
]
influxdb = [
  "influxdb>=5.3,<6",
  "influxdb-client>=1.18,<2",
  "influxdb3-python>=0.3,<1",
]
interpolation = [
  "scipy>=1.9,<1.13",
  "shapely>=2,<3",
  "utm>=0.7,<1",
]
ipython = [
  "ipython>=8.5,<9",
  "matplotlib>=3.3,<3.9",
]
mpl = [
  "matplotlib>=3.3,<3.9",
]
mysql = [
  "mysqlclient>=2,<3",
  "pandas>=2,<2.3",
]
postgresql = [
  "psycopg2-binary>=2,<3",
]
radar = [
  "h5py>=3.1,<4",
]
radarplus = [
  "pybufrkit>=0.2,<0.3",
  "wradlib>=2.0.1,<3",
  "xradar>=0.2,<0.5",
]
restapi = [
  "fastapi>=0.95.1,<0.111",
  "httpx>=0.24,<0.28",
  "uvicorn>=0.14,<1",
]
sql = [
  "duckdb>=0.9",
]
# docs
docs = [
  "docformatter>=1.4,<1.8",
  "furo>=2023.3,<2024.2",
  "ipython>=8.5,<9",
  "matplotlib>=3.3,<3.9",
  "pickleshare==0.7.5",
  "pyyaml>=6,<7",
  "sphinx>=7,<8",
  "sphinx-autodoc-typehints>=1.11,<3",
  "sphinx-autobuild>=2020.9,<2024.3",
  "sphinx_design>=0.5,<1",
  "sphinxcontrib-svg2pdfconverter>=1.1,<2",
  "tomlkit>=0.7,<1",
]

[project.urls]
Explorer = "https://wetterdienst.streamlit.app/"
Homepage = "https://wetterdienst.readthedocs.io/"
Issues = "https://github.com/earthobservations/wetterdienst/issues"
Releases = "https://github.com/earthobservations/wetterdienst/releases"
Repository = "https://github.com/earthobservations/wetterdienst"
Restapi = "https://wetterdienst.eobs.org/"
Stripes = "https://stripes.streamlit.app/"

[project.scripts]
wddump = "wetterdienst.provider.dwd.radar.cli:wddump"
wetterdienst = "wetterdienst.ui.cli:cli"

[tool.rye]
dev-dependencies = [
  # general
  "coverage[toml]>=7.3,<8",
  "dirty-equals>=0.5,<1",
  "freezegun>=1.2,<2",
  "h5py>=3.1,<3.11",
  "jsonschema[format-nongpl]>=4.17.3,<5",
  "lmfit>=1.1.0,<1.3",
  "pybufrkit>=0.2,<0.3",
  "pytest>=7.2,<9",
  "pytest-cov>=4,<5",
  "pytest-dictsdiff>=0.5,<0.6",
  "pytest-notebook>=0.10",
  "pytest-rerunfailures<14",
  "pytest-xdist>=3,<4",
  "surrogate==0.1",
  # formatting and linting
  "ruff>=0.3.3"
]

[tool.rye.scripts]
install-dev = { cmd = "uv pip install .[bufr,cratedb,duckdb,explorer,export,import,influxdb,interpolation,mpl,mysql,ipython,radar,radarplus,restapi,postgresql,sql]" }
# Formatting and linting
"format:fmt" = { cmd = "rye run ruff format" }
"format:lint" = { cmd = "rye run ruff check --fix" }
format = { chain = [ "format:fmt", "format:lint" ] }
"lint:fmt" = { cmd = "rye run ruff format --check" }
"lint:lint" = { cmd = "rye run ruff check" }
lint = { chain = [ "lint:fmt", "lint:lint" ] }
# docs
docs = { cmd = "cd docs && make html" }
"test:parallel" = { cmd = "rye run pytest -vvv --numprocesses=auto -m 'not (explorer or cflake)'" }
"test:cflakes" = { cmd = "rye run pytest -vvv -m cflake" }
test = { chain = [ "test:parallel", "test:cflakes" ] }
# For Windows CI
test-slow = { cmd = "rye run pytest" }
coverage = { cmd = "rye run pytest --cov=wetterdienst" }
coverage-parallel = { cmd = "rye run pytest --cov=wetterdienst --numprocesses=auto -m 'not (explorer or cflake)'" }
sync = { cmd = "rye sync" }
lock = { cmd = "rye lock" }

[tool.ruff]
target-version = "py39"
line-length = 120
include = [
  "benchmarks/**/*.py",
  "examples/**/*.py",
  "tests/**/*.py",
  "wetterdienst/**/*.py",
]
extend-include = [
  "*.ipynb",
]
[tool.ruff.lint]
select = [
    # Bandit
    "S",
    # eradicate
    "ERA",
    # flake8-2020
    "YTT",
    # isort
    "I",
    # print
    "T20",
    # Pycodestyle
    "E",
    "W",
    # Pyflakes
    "F",
    # return
    "RET",
    # pyupgrade
    "UP",
    # flake8-commas
    "COM",
    # future-annotations
    "FA",
    # flake8-type-checking
    "TCH",
    # flake8-unused-arguments
    "ARG",
    # flake8-use-pathlib
    "PTH"
]
ignore = [
    # zip() without an explicit strict= parameter.
    "B905",
    # Unnecessary `elif` after `return` statement
    "RET505",
    "COM812"
]
unfixable = ["ERA", "F401", "F841", "T20", "ERA001"]

[tool.ruff.lint.per-file-ignores]
"**/__init__.py" = ["F401"]
"benchmarks/*" = ["T20"]
"docs/conf.py" = ["ERA001"]
"examples/*" = ["T20"]
"tests/*" = ["S101"]
"tests/provider/dwd/observation/test_available_datasets.py" = ["E402"]
"wetterdienst/__init__.py" = ["E402"]
"wetterdienst/ui/restapi.py" = ["B008", "UP007"]

[tool.pytest.ini_options]
addopts = "-rsfEX -p pytester --strict-markers --verbosity=3"
#log_cli = true
#log_cli_level = "DEBUG"
log_date_format = "%Y-%m-%dT%H:%M:%S"
log_format = "%(asctime)-15s.%(msecs)03d [%(name)-35s] %(levelname)-8s: %(message)s"
log_level = "DEBUG"
markers = [
  "remote: Tests accessing the internet.",
  "slow: Slow tests.",
  "sql: All tests related to SQL.",
  "explorer: All tests related to the explorer UI.",
  "cflake: Tests which are flaky under concurrency",
]
minversion = "2.0"
testpaths = [ "tests" ]
# Detect tests marked with xfail, which are actually succeeding.
# xfail_strict = true

# Retry flaky tests, thereby improving the consistency of the test suite results.
reruns = 0
reruns_delay = 5

[tool.coverage.run]
branch = true
source = [ "wetterdienst" ]
[tool.coverage.report]
show_missing = true
fail_under = 0
omit = [
  "tests/*",
  "wetterdienst/provider/dwd/radar/cli.py",
]
